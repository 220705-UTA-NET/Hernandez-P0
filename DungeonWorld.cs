namespace DungeonCrawler
{
    public class DungeonWorld{
        //eventually I want to read a map from a file for now it's just a simple 
        private OverworldPlayerLocation? playerLocation;
        public DungeonWorld(){
            this.playerLocation = null;
        }
        private char[,] SourceMap = new char[20,18] {
            {'*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
            {'*','#','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
            {'_','_','#','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
            {'#','O','#','*','*','*','*','#','#','#','#','#','#','#','#','*','*','*'},
            {'#','O','#','#','*','*','*','#','O','O','O','O','O','O','#','*','*','*'},
            {'#','O','O','#','#','#','#','#','O','#','#','#','#','O','#','*','*','*'},
            {'*','#','O','#','O','O','O','O','O','#','*','#','#','O','#','#','#','*'},
            {'#','O','O','#','O','#','#','#','#','#','*','#','O','O','O','O','#','*'},
            {'#','O','O','#','O','#','*','#','#','#','#','#','O','#','#','O','#','*'},
            {'#','O','#','O','O','#','#','O','#','O','O','O','O','#','#','O','#','*'},
            {'#','O','O','O','O','#','#','O','#','O','#','#','#','#','#','O','#','*'},
            {'#','O','#','#','#','O','O','O','#','O','O','#','*','*','#','#','#','*'},
            {'#','O','O','O','#','O','#','*','#','#','O','#','#','#','#','*','*','*'},
            {'#','#','#','O','#','O','#','*','*','#','O','O','O','O','#','*','*','*'},
            {'*','*','#','O','#','O','#','*','*','*','#','#','#','O','#','#','#','#'},
            {'*','#','#','O','#','O','#','*','*','*','*','*','#','O','O','O','O','#'},
            {'*','#','O','O','O','O','#','*','*','*','*','*','#','O','#','#','O','#'},
            {'*','*','#','#','#','O','#','*','*','*','*','*','#','O','#','*','#','*'},
            {'*','*','*','*','*','#','*','*','*','*','*','*','#','O','O','#','*','*'},
            {'*','*','*','*','*','*','*','*','*','*','*','*','*','#','#','#','*','*'},
        };
        public char[,] WorkingMap = new char[20,18] {
            {'*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
            {'*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
            {'*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
            {'*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
            {'*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
            {'*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
            {'*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
            {'*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
            {'*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
            {'*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
            {'*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
            {'*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
            {'*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
            {'*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
            {'*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
            {'*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
            {'*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
            {'*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
            {'*','*','*','*','*','*','*','*','*','*','*','*','#','O','O','#','*','*'},
            {'*','*','*','*','*','*','*','*','*','*','*','*','*','#','O','#','*','*'},
        };
        public int GetMapWidth(){
            return 18;
        }
        public int GetMapHeight(){
            return 20;
        }
        public void PrintMap(){
            System.Console.Clear();
            for(int i = 0; i < 20; i++){
                for(int j = 0; j < 18; j++){
                    if(this.playerLocation is not null && i == this.playerLocation.mx && j == this.playerLocation.my){
                        System.Console.Write("P");
                    }
                    else{
                        System.Console.Write(WorkingMap[i,j]);
                    }
                    System.Console.Write(" ");
                }
                System.Console.Write("\n");
            }
        }
        public void SetPlayerLocation(OverworldPlayerLocation p){
            this.playerLocation = p;
        }
        
        public void UpdateMap(){
            if(playerLocation == null){
                return;
            }
            int x = playerLocation.mx;
            int y = playerLocation.my;
            WorkingMap[x,y-1] = SourceMap[x,y-1];
            WorkingMap[x,y+1] = SourceMap[x,y+1];
            WorkingMap[x-1,y] = SourceMap[x-1,y];
            WorkingMap[x+1,y] = SourceMap[x+1,y];

        }
        public char GetTileAt(int x, int y){
            return WorkingMap[x,y];
        }
    }
}